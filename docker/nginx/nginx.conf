# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/

user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

pid        /run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    index   index.html index.htm;

    upstream registry {
      server regserver:5000;
    }

    upstream auth {
      # Hrmmmm. This is a pain until I dockerize bowline.
      server 192.168.122.1:8000;
    }

    server {
      listen 80 default_server;
      listen 443 ssl;
      server_name _;

      ssl_certificate /etc/nginx/ssl/nginx.crt;
      ssl_certificate_key /etc/nginx/ssl/nginx.key;

      client_max_body_size 0;                  # disable any limits to avoid HTTP 413 for large image uploads
      chunked_transfer_encoding on;            # required to avoid HTTP 411: see Issue #1486 (https://github.com/dotcloud/docker/issues/1486)
      proxy_set_header Host      $http_host;   # required for docker client's sake
      proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP

      root  /usr/local/nginx/html;
      index  index.html index.htm;

      rewrite ^/users/(.*)$ /v1/users/$1? last;
      rewrite ^/_ping/(.*)$ /v1/_ping/$1? last;
      rewrite ^/images/(.*)$ /v1/images/$1? last;
      rewrite ^/respositories/(.*)$ /v1/respositories/$1? last;

      location = /auth {
        proxy_pass http://auth;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header X-Docker-Token "";
      }

      location / {
        proxy_pass http://registry;
        auth_request /auth;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_buffering off;
      }

      location /api/foo {
        auth_basic off;
        proxy_pass http://auth;
      }

      location /v1/_ping {
        auth_basic off;
        proxy_pass http://registry;
      }
      
      location /_ping {
        auth_basic off;
        proxy_pass http://registry;
      }

    }

}